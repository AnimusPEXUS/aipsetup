// Code generated by go-bindata.
// sources:
// ui/main.glade
// DO NOT EDIT!

package ui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _uiMainGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdf\x73\xa3\x36\x10\x7e\xbf\xbf\x42\xd5\x6b\xc7\xb1\x2f\x9d\xce\xf4\xc1\x70\x73\xb9\x6b\x32\x37\x77\x97\x4b\x93\xb4\x7d\x64\x16\x58\x63\xd5\xb2\x44\x24\x61\xc7\xff\x7d\x07\xc8\xe5\x87\x83\x30\x02\xc7\x49\x1c\xde\x92\x41\xbb\xec\xb7\xfa\x76\xd9\x0f\xe1\xf1\x87\xeb\x39\x27\x0b\x54\x9a\x49\xe1\xd1\xf7\x07\x23\x4a\x50\x44\x32\x66\x22\xf1\xe8\xdf\x97\xc7\x83\x3f\xe8\x07\xff\xdd\xf8\x97\xc1\x80\x9c\xa0\x40\x05\x06\x63\xb2\x64\x66\x4a\x12\x0e\x31\x92\xdf\x0e\x0e\x47\x07\x23\x32\x18\xf8\xef\xc6\x4c\x18\x54\x13\x88\xd0\x7f\x47\xc8\x58\xe1\x55\xc6\x14\x6a\xc2\x59\xe8\xd1\xc4\xcc\x7e\xa5\x77\x37\xca\xcd\xe8\xb0\x58\x27\xc3\xff\x30\x32\x24\xe2\xa0\xb5\x47\x4f\xcc\xec\x5f\x26\x62\xb9\xa4\x84\xc5\x1e\x55\x52\x1a\x9a\x2f\x23\x64\x9c\x2a\x99\xa2\x32\x2b\x22\x60\x8e\x1e\x8d\x40\x04\x13\x19\x65\x9a\xfa\xc7\xc0\x35\x8e\x87\x3f\x17\xdc\xac\x8f\xa6\x8c\xc7\xe5\xdf\x55\xb7\x39\x92\xd7\xf4\xe7\xd5\xc7\xde\x17\x4c\xb3\x90\x23\xf5\x2f\x55\xf6\xc8\x75\x9b\x70\xaa\x6c\xa4\x62\x28\x0c\x18\x26\x05\xf5\x17\xa8\x0c\x8b\x80\x57\x1a\x3e\xc0\x52\x8d\xe7\x3b\x8a\xec\x08\x54\x99\xb7\x79\x48\xef\xaf\x6e\x81\xaf\x2d\xc6\xea\x70\xed\x21\x7f\x31\x38\xa7\xeb\x4b\x5b\xc6\xdb\x25\xe6\x2a\x5b\x0e\x21\x72\x4a\x8c\x02\xa1\x39\x18\x08\x39\x7a\x74\x85\x9a\xfa\xc1\x31\xe3\x4e\xae\x32\x8d\x41\x26\x62\x54\x9c\x89\x26\x28\x8a\x0c\x12\xb3\x4a\xd1\xa3\x3a\x0b\xe7\x28\xb2\x8a\x2c\xd9\x92\x5a\xb9\xb4\x43\x52\xbb\x26\x96\x58\x49\x51\x8f\xa3\x20\x47\x49\x68\x16\x28\xe4\x12\x62\x0b\xb4\xce\xf0\xb6\x01\xb1\xca\x87\x9d\x43\xe7\x05\x9e\x36\x3e\x1d\xc9\x74\xeb\x06\xa2\x08\x79\xde\xc3\xa5\x22\x33\x5c\x79\x54\x51\xa2\x59\x22\x80\x7b\x14\x22\xc3\x16\x60\x90\x92\xb9\x8c\xd9\x84\xa1\xca\xb7\xe1\xf3\xd7\xe0\xd3\x8f\xd3\xcb\xf3\x1f\xdf\x82\xef\x1f\x2f\xbe\x96\x2d\xbb\xd2\xf7\xb0\xdc\x40\xcb\xde\x0f\x6b\x36\xdf\x95\x18\x17\x98\x42\x81\xa1\xa6\x7d\xd8\x32\xf7\x0c\x94\xd8\x61\x66\x1e\x95\x8c\x86\x05\xbe\xec\xec\xb8\x14\xcc\x05\x2c\x5a\x79\xdc\x5a\xb9\xe8\xbe\x5c\xf6\xba\x5c\xae\x32\x66\x5e\x76\x76\x5c\xca\xe5\xaf\x8c\x99\x67\x2d\x97\xab\xe7\x2f\x17\xbb\xa1\xc5\xa8\xda\xa0\x62\x71\xd5\xc2\x71\x0a\xd1\x8c\x89\xa4\x7e\x8a\xc6\xeb\x14\x44\xbc\x69\x84\x5e\x33\x9a\x30\xce\xdd\x86\xf5\x54\x6a\x56\x2a\x8b\x51\xb5\xc9\x78\xf8\x28\xdc\x47\x38\x9b\x08\x8f\x33\x25\x13\x85\x5a\xdf\x8a\x8f\x74\x93\xf8\x68\xac\x23\xd6\xec\x84\x0c\xf4\x54\x2e\x03\x70\xce\x45\xc6\x35\x06\xda\x60\x4a\xfd\xd1\xc1\xe8\xbd\x2d\x21\xaf\x66\x4b\xad\x08\xb6\xb3\xa5\xa7\xd2\x60\x28\xe5\xac\xdc\x4f\xf1\xd4\x62\xd2\xc5\xac\x20\x40\x28\x55\x8c\xca\x31\xdf\x3a\x52\x92\x73\x70\x0e\x14\x45\x6e\x13\xa4\x32\xcd\xd2\x0d\x96\x0d\x75\xef\xc3\x57\x0f\x9d\xb2\xba\x21\xb3\xce\x92\xb7\xf1\x2b\x89\x7a\xcc\xd5\xb8\x2f\xa5\xe4\x21\xa8\x7d\x50\xa7\x39\x94\xa3\xcc\x18\x29\xca\x1a\x31\x61\x20\x70\x19\x30\x31\x91\xfb\x33\x41\x9c\xe2\x92\x9c\x63\x24\xd5\x4e\x55\xea\x7a\xd9\x1a\x19\xcd\x02\x16\x53\x3f\x31\xb3\x81\xc0\x65\xd7\x19\xd2\xd6\xd4\xeb\x82\x68\xd4\xe0\xeb\x1c\x4c\xe5\x5c\x26\x28\x50\x6e\xea\x77\xf7\x51\xd4\x86\xb9\xd5\x51\xb8\x82\xce\x31\xf2\x3d\xa3\xf3\x67\xe4\x68\x76\xaa\x20\x6b\xa9\x1c\x37\x0c\xe7\xad\xb3\xb9\x0e\x7f\x3d\xf6\x4e\xb8\xdd\xc7\x35\x9b\xe5\xc6\x49\xbc\x41\x8e\xac\xf9\x71\x79\xfe\x5e\x14\x13\x10\xc6\x37\x27\x2c\xbb\x7d\x0c\xb7\x31\x9f\x96\x33\x5b\x08\x2a\x48\x25\x67\xd1\x8a\xfa\xc0\x97\xb0\xd2\xae\x8e\x16\xdb\x72\x24\x17\xa8\x38\xac\x82\xd2\x1f\x13\xc9\x53\xcd\x17\x0a\xf1\x1f\x86\x37\xc7\x60\x79\x1f\x0e\x4c\x39\xba\x3e\x4b\x37\x6e\xeb\xe2\x66\x76\x4e\x14\x8b\x83\xbc\x77\x6a\xea\x87\xd2\x4c\x1b\xb9\x2a\x8f\x40\x8a\x43\x45\x01\x7c\x50\xfc\xeb\x51\x8d\x1c\xa3\xb2\x9a\xac\xa6\xb6\x84\x5e\xdc\xda\x5a\xdf\x34\x6c\x78\xae\x3e\xc9\xab\x88\xb6\x6d\xac\x4d\x45\x6d\xa3\x8b\x59\xc4\xe7\x1d\x50\xd7\x2e\xd6\xf8\xa5\xcb\xda\xc1\x98\x81\x75\x65\x5a\xb5\xf3\xdf\x8a\x81\xe0\x85\xea\x2d\xfb\xb4\xf2\x49\xce\xd3\x7c\x40\x20\x67\x10\xcd\x20\x41\xf2\x45\x4c\x24\xb9\xcc\x57\xd8\x6f\x60\x23\x99\x9d\x60\xeb\x01\x19\x08\x83\x92\x24\x1b\xb0\x58\xb6\xb9\x66\xd7\x7a\x61\x6c\xc3\xbd\xdf\xc2\xb8\x3c\xb8\x0d\x22\x30\x7a\x7f\xc4\xc4\xee\x4f\x6f\x6b\xc5\x84\xc2\x89\x42\xdd\xe0\xc1\xfa\xd6\xd5\xc4\x56\x18\x0d\x69\xca\x57\x7b\x46\xe8\x8f\x39\xa6\x17\xc3\x67\x68\x16\xcd\x5b\x67\x73\xaf\x8d\xb7\xa5\x8d\xcf\x40\x60\x7c\x73\x7e\x05\xe2\xfd\x2b\x10\xc7\xce\x13\x49\x7d\xfe\x7f\x77\x35\x5d\xb2\x18\x83\x29\x88\xb8\x31\xfe\xfa\xc6\x9b\x72\x88\x70\x2a\x79\x8c\xca\x22\xcf\xba\xb4\xf5\x4e\xde\x7b\xed\xe6\xa8\xdd\x5c\x14\x47\xa3\xe0\xdc\xd5\xc6\x9b\xd0\x88\x60\x30\xc9\xfb\x80\x26\x7f\xc6\xcc\x48\xf5\x94\xca\xb0\x21\x89\x7a\x41\xd9\x0b\xca\xdd\x08\xca\x44\xc9\x2c\xdd\xa3\x09\xbc\x97\x94\xaf\x73\x08\xdf\xa2\xa4\xdc\x37\x4a\xf7\xa2\xf2\x15\xf2\xb9\x17\x95\x4f\x23\x2a\x0f\xdf\xa0\xa8\xdc\xb0\x01\x76\xdb\x40\xa3\x69\x07\xe1\x45\xe9\xd2\x5e\x39\xee\x44\x39\x1e\xf6\xca\xb1\xca\xd6\xfe\x60\x3e\x29\x06\x8d\x9d\xaa\xc6\x9a\x3d\xda\x89\x6a\xec\xfe\x79\xb7\xcb\x57\xc3\x5d\xbe\xee\xb6\x64\x6a\xf3\xd7\xdd\x0f\x21\xde\xbb\x78\x77\x61\x3c\xbc\xf7\x33\xed\xff\x03\x00\x00\xff\xff\x09\xf8\x9a\xa1\xff\x3d\x00\x00")

func uiMainGladeBytes() ([]byte, error) {
	return bindataRead(
		_uiMainGlade,
		"ui/main.glade",
	)
}

func uiMainGlade() (*asset, error) {
	bytes, err := uiMainGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/main.glade", size: 15871, mode: os.FileMode(420), modTime: time.Unix(1530543258, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui/main.glade": uiMainGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ui": &bintree{nil, map[string]*bintree{
		"main.glade": &bintree{uiMainGlade, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

