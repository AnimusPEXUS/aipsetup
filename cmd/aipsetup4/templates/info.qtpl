
{% import "sort" %}

{% func InfoServerSearchForm() %}

<form action="/goto" method="GET">
    <table>
        <tr>
            <td colspan="2">Go To Package Information</td>
        </tr>

        <tr>
            <td>Package Name</td>
            <td><input type="text" name="name"/></td>
        </tr>

        <tr>
            <td>Output Format</td>
            <td>
                <select name="format">
                    <option value="text" default="default">Text</option>
                    <option value="yaml">YAML</option>
                    <option value="json">JSON</option>
                </select>
            </td>
        </tr>

        <tr>
            <td colspan="2"><button type="submit">Submit</button></td>
        </tr>
    </table>
</form>

{% endfunc %}

{% func InfoServerAllInfoPage(info_list []string)
%}{%= InfoServerNormalPage(
    "AIPSETUP Package Info Index :: All Packages",
    InfoServerAllInfoBlock(info_list),
    ) %}{% endfunc %}

{% func InfoServerIndexPage()
%}{%= InfoServerNormalPage(
    "AIPSETUP Package Info Index",
    "",
    ) %}{% endfunc %}

{% func InfoServerAllInfoBlock(info_list []string) %}

    {% code sort.Strings(info_list) %}

    <div>
    <div>
        Item Count: {%d len(info_list) %}
    </div>
    <div>
        <table>

    {% for _, i := range info_list %}
            <tr>
            <td>
            <a href="/info/{%u i %}">{%s i %}</a>
            </td>
            <td>
            <a href="/json/{%u i %}">json</a>
            </td>
            <td>
            <a href="/yaml/{%u i %}">yaml</a>
            </td>
            </tr>
    {% endfor %}

        </table>
    </div>
    </div>

{% endfunc %}

{% func InfoServerNormalPage(title, body string)
%}{%= AipsetupServerOveralHtmlPage(
    title,
    OveralBodyHeader(title, InfoServerSearchForm()),
    body,
    "",
    ) %}

{% endfunc %}

{% func InfoServerHtmlInfoPage(name string, info *aipsetup.CompletePackageInfo)
%}

<table>
    <tr>
        <td>Name</td>
        <td>{%s name %}</td>
        <td class="collapsed_info">
            Name of package, under which it known to aipsetup
            it is also the first element of .aip file names.
            The package name is not the part of it's info.
        </td>
    </tr>
    <tr>
        <td colspan="2">
            Overal Package Info
        <td>
        <td class="collapsed_info">
            TODO: write explanations or remove this cell
        </td>
    </tr>
    <tr>
        <td>
            Description
        </td>
        <td>
        </td>
        <td>
            {%s info.Description %}
        </td>
    </tr>
    <tr>
        <td>
            Home Page
        </td>
        <td>
            {%s info.HomePage %}
        </td>
        <td>
            URL To Homapage
        </td>
    </tr>
    <tr>
        <td>
            VersionTool
        </td>
        <td>
        </td>
        <td>
            Name of tool to use to classify tarball version
        </td>
    </tr>
    <tr>
        <td>
            Removable
        </td>
        <td>
            {%s info.Removable %}
        </td>
        <td>
            Is package can be removed automatically?
        </td>
    </tr>
    <tr>
        <td>
            Reducible
        </td>
        <td>
            {%s info.Reducible %}
        </td>
        <td>
            Is aipsetup able automatically reduce older package's version files
            and leave the latest installed package's files intact
        </td>
    </tr>
    <tr>
        <td>
            Non Installable?
        </td>
        <td>
            {%b info.NonInstallable %}
        </td>
        <td>
            Not an installable package
        </td>
    </tr>
    <tr>
        <td>
            Deprecated
        </td>
        <td>
            {%b info.Deprecated %}
        </td>
        <td>
            Is Package Geprecatred? aipsetup will refuse installing such files
        </td>
    </tr>
    <tr>
        <td>
            PrimaryInstallOnly
        </td>
        <td>
            {%b PrimaryInstallOnly %}
        </td>
        <td>
            Is package may be instaslled for other than primary architecture
            of host system. (for instance, PYthon 3 and Python 2 are such
            packages)
        </td>
    </tr>
    <tr>
        <td>
            Building Dependencies
        </td>
        <td>
            {%v info.BuildDeps %}
        </td>
        <td>
            List of packages, which required to be installed into system
            in order to build this one.
        </td>
    </tr>
    <tr>
        <td>
            Shared Object Dependencies
        </td>
        <td>
            {%v info.SODeps %}
        </td>
        <td>
            List of packages, which contain shared objects, which required
            for this package to function.
        </td>
    </tr>
    <tr>
        <td>
            RunTime Dependencies
        </td>
        <td>
            {%v info.RunTimeDeps %}
        </td>
        <td>
            List of packages, which contain some other this package's
            dependencies
        </td>
    </tr>
    <tr>
        <td>
            SRC Server Search Hints
        </td>
        <td>
        </td>
        <td>
        </td>
    </tr>
    <tr>
        <td>
            BaseName
        </td>
        <td>
            {%s info.BaseName %}
        </td>
        <td>
            Used to fasten SRC server indexing
        </td>
    </tr>
    <tr>
        <td>
            Filters
        </td>
        <td>
            {%v info.Filters %}
        </td>
        <td>
            Filter out SEC server output
        </td>
    </tr>
    <tr>
        <td>
            SourcePathPrefixes
        </td>
        <td>
            {%s info.SourcePathPrefixes %}
        </td>
        <td>
            One more mechanism to filterout SRC server output.
            TODO: In future versions probably will be merged into Filters
            functionality.
        </td>
    </tr>
    <tr>
        <td>
            Package Builder Info
        </td>
        <td>
        </td>
        <td>
        </td>
    </tr>
    <tr>
        <td>
            BuilderName
        </td>
        <td>
            {%s BuilderName %}
        </td>
        <td>
            Used by package building mechanism to select right builder code
            for this package.
        </td>
    </tr>
    <tr>
        <td>
            Categorization Info
        </td>
        <td>
        </td>
        <td>
        </td>
    </tr>
    <tr>
        <td>
            Tags
        </td>
        <td>
            {%v info.Tags %}
        </td>
        <td>
            Tags.. ToDo: write better explanation.. ... probably will be used
            in some sort of "package explorer"
        </td>
    </tr>
</table>

{% endfunc %}
