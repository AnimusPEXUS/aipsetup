// Code generated by go-bindata.
// sources:
// ui/main.glade
// DO NOT EDIT!

package ui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _uiMainGlade = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\xdf\x53\xdb\x38\x10\x7e\xe7\xaf\xd0\xe9\xf5\x26\x24\xc0\xc3\xdd\x43\xe2\x4e\x69\x0f\xa6\xd3\x96\x72\xc0\xdd\x3d\x7a\xd6\xd6\xc6\xd1\x45\x91\x8c\x24\x27\xe4\xbf\xef\xd8\xa6\xfc\x08\x96\xe3\x1f\x21\x40\xf0\x5b\x3b\xd1\xae\xf7\x5b\x7d\xbb\xda\xcf\x32\xc3\x0f\x37\x33\x41\xe6\xa8\x0d\x57\x72\x44\x0f\xf6\x07\x94\xa0\x0c\x15\xe3\x32\x1a\xd1\x7f\xae\x4e\x7a\x7f\xd2\x0f\xde\xde\xf0\xb7\x5e\x8f\x9c\xa2\x44\x0d\x16\x19\x59\x70\x3b\x21\x91\x00\x86\xe4\x68\xff\x70\xb0\x3f\x20\xbd\x9e\xb7\x37\xe4\xd2\xa2\x1e\x43\x88\xde\x1e\x21\x43\x8d\xd7\x09\xd7\x68\x88\xe0\xc1\x88\x46\x76\xfa\x3b\xbd\x7f\x50\x6a\x46\xfb\xd9\x3a\x15\xfc\x8f\xa1\x25\xa1\x00\x63\x46\xf4\xd4\x4e\xff\xe3\x92\xa9\x05\x25\x9c\x8d\xa8\x56\xca\xd2\x74\x19\x21\xc3\x58\xab\x18\xb5\x5d\x12\x09\x33\x1c\xd1\x10\xa4\x3f\x56\x61\x62\xa8\x77\x02\xc2\xe0\xb0\xff\x6b\xc1\xed\xfa\x70\xc2\x05\xcb\xff\x5d\xf4\x98\x63\x75\x43\x7f\xfd\xfa\xd4\xfb\x9c\x1b\x1e\x08\xa4\xde\x95\x4e\x9e\xb8\x6e\x12\x4e\x91\x8d\xd2\x1c\xa5\x05\xcb\x95\xa4\xde\x1c\xb5\xe5\x21\x88\x42\xc3\x47\x58\x8a\xf1\x7c\x47\x99\x1c\x83\xce\xf3\x36\x0b\xe8\xc3\xd5\x0d\xf0\x35\xc5\x58\x1c\xae\x3b\xe4\x2f\x16\x67\x74\x75\x69\xc3\x78\xdb\xc4\x5c\x64\x2b\x20\x40\x41\x89\xd5\x20\x8d\x00\x0b\x81\xc0\x11\x5d\xa2\xa1\x9e\x7f\xc2\x45\x2d\x57\x89\x41\x3f\x91\x0c\xb5\xe0\xb2\x0a\x8a\x2c\x83\xc4\x2e\x63\x1c\x51\x93\x04\x33\x94\x49\x41\x96\x5c\x49\x2d\x5c\xda\x22\xa9\x6d\x13\x4b\x9c\xa4\x28\xc7\x91\x91\x23\x27\x34\xf7\x35\x0a\x05\xcc\x01\xad\x35\xbc\x4d\x40\x2c\xf2\xe1\xe6\xd0\x45\x86\xa7\x89\xcf\x9a\x64\xba\x73\x03\x61\x88\x22\xed\xe1\x4a\x93\x29\x2e\x47\x54\x53\x62\x78\x24\x41\x8c\x28\x84\x96\xcf\xc1\x22\x25\x33\xc5\xf8\x98\xa3\x4e\xb7\xe1\xf3\x57\xff\xd3\x8f\xb3\xab\x8b\x1f\xdf\xfc\xef\x1f\x2f\xbf\xe6\x2d\xbb\xd0\x77\x3f\xdf\x40\xc7\xde\xf7\x4b\x36\xbf\x2e\x31\x2e\x31\x86\x0c\x43\x49\xfb\x70\x65\xee\x05\x28\xb1\xc5\xcc\x3c\x29\x19\x03\x73\x7c\xdd\xd9\xa9\x53\x30\x97\x30\x6f\xe4\x71\x63\xe5\x62\xba\x72\xd9\xe9\x72\xb9\x4e\xb8\x7d\xdd\xd9\xa9\x53\x2e\x7f\x27\xdc\xbe\x68\xb9\x5c\xbf\x7c\xb9\xb8\x0d\x1d\x46\xc5\x06\x05\x8b\x8b\x16\x0e\x63\x08\xa7\x5c\x46\xe5\x53\x34\xde\xc4\x20\xd9\xba\x11\x7a\xc5\x68\xcc\x85\xa8\x37\xac\xc7\xca\xf0\x5c\x59\x0c\x8a\x4d\x86\xfd\x27\xe1\x3e\xc1\x59\x45\x78\x9c\x6b\x15\x69\x34\xe6\x4e\x7c\xc4\xeb\xc4\x47\x65\x1d\xb1\x62\x27\x95\x6f\x26\x6a\xe1\x43\xed\x5c\x24\xc2\xa0\x6f\x2c\xc6\xd4\x1b\xec\x0f\x0e\x5c\x09\x79\x33\x5b\xea\x44\xb0\x99\x2d\x3d\x53\x16\x03\xa5\xa6\xf9\x7e\xca\xe7\x16\x93\x75\xcc\x32\x02\x04\x4a\x33\xd4\x1b\x52\xa1\x8f\x5f\x04\xb4\xc2\xb8\x06\x67\x6d\x01\x5a\xf9\x05\x41\x39\xe6\x62\xdc\x57\x4a\x89\x00\xf4\x2e\x68\xc5\x14\xca\x71\x62\xad\x92\x39\x63\x6d\xe0\x4b\x5c\xf8\x5c\x8e\xd5\xee\x9c\xe7\x67\xb8\x20\x17\x18\x2a\xbd\x55\xcd\xb8\x5a\x7e\x56\x85\x53\x9f\x33\xea\x45\x76\xda\x93\xb8\x68\x3b\xd1\xb9\x5a\x6c\x59\x10\x95\xda\x6d\x99\x83\x89\x9a\xa9\x08\x25\xaa\x75\xdd\xe7\x21\x8a\xd2\x30\x37\x3a\x98\x16\xd0\x99\xa1\xd8\x31\x3a\x7f\x46\x81\x76\xab\x7a\xae\x94\xca\xac\x62\x38\xef\x9d\xcd\x65\xf8\xcb\xb1\xb7\xc2\x5d\x7f\x78\x72\x59\xae\x9d\x8b\x2b\xe4\xc8\x99\x9f\x3a\xe7\xef\x65\xa8\x95\x10\xc8\x6e\xef\x3b\xb6\x7b\x0c\x37\x31\x9f\x98\x2c\xe2\x00\xb4\x1f\x2b\xc1\xc3\x25\xf5\x40\x2c\x60\x69\xea\x3a\x9a\x6f\xca\x91\x9a\xa3\x16\xb0\xf4\x73\x7f\x5c\x46\xcf\x35\x5f\x68\xc4\x7f\x39\xde\x5e\x4a\xa5\x7d\xd8\xcf\x5a\xd9\x0b\x75\xe3\xa6\x2e\x50\xa6\x41\xfb\x91\xe6\xcc\x4f\x7b\xa7\xa1\x5e\xa0\xec\xa4\x92\xab\xfc\x42\x22\xbb\xe2\x93\x20\x7a\xd9\x7f\x47\xd4\xa0\xc0\x30\xaf\x26\xa7\xa9\x2b\xa1\x97\x77\xb6\x4e\xdd\xbf\xe6\x5c\x7d\x96\x17\x03\x4d\xdb\x58\x93\x8a\xda\x44\x17\x73\x48\xc1\x7b\xa0\x75\xbb\x58\xe5\x57\x20\x2b\xd7\x54\x16\x56\x75\x62\xd1\xce\x7f\xcb\x06\x82\x57\xaa\xb7\xdc\xd3\xca\x27\x35\x8b\xd3\x01\x81\x9c\x43\x38\x85\x08\xc9\x17\x39\x56\xe4\x2a\x5d\xe1\x7e\x80\x8b\x64\x6e\x82\xad\x06\x64\x21\xf0\x73\x92\xac\xc1\xe2\xd8\xe6\x92\x5d\xeb\x84\xb1\x0b\xf7\x6e\x0b\xe3\xfc\x1a\xd5\x0f\xc1\x9a\xdd\x11\x13\xdb\xbf\x4b\x2d\x15\x13\x1a\xc7\x1a\x4d\x85\x83\xf5\xbd\xab\x89\x8d\x30\x1a\xe2\x58\x2c\x77\x8c\xd0\x1f\x53\x4c\xaf\x86\xcf\x50\x2d\x9a\xf7\xce\xe6\x4e\x1b\x6f\x4a\x1b\x9f\x83\x44\x76\x7b\x9b\x04\xf2\xe0\x0d\x88\xe3\xda\x13\x49\x79\xfe\x8f\x8e\xfe\xa8\x6b\xbc\xe0\x0c\xfd\x09\x48\x56\x39\x03\xe5\xad\x37\x16\x10\xe2\x44\x09\x86\xda\x21\xd0\xda\x34\xf6\x56\xde\x3b\xf5\x56\x53\xbd\xd5\xd1\x1c\x95\x82\xab\xaf\x37\xde\x85\x4a\x04\x8b\x51\xda\x09\x0c\xf9\x8b\x71\xab\xf4\x73\x6a\xc3\x8a\x24\xea\x24\x65\x27\x29\xb7\x23\x29\x23\xad\x92\x78\x87\x66\xf0\x4e\x54\xbe\xcd\x31\x7c\x83\xa2\x72\xd7\x28\xdd\xc9\xca\x37\xc8\xe7\x4e\x56\x3e\x8f\xac\x3c\xec\x64\x65\x0d\x63\xdf\xa0\x6d\x86\xe1\x55\x09\xd3\x4e\x3a\x6e\x45\x3a\x1e\x76\xd2\xb1\xc8\xd6\x7d\x32\x9f\x66\x93\xc6\x56\x65\x63\xc9\x1e\x6d\x45\x36\xb6\xff\xde\xba\xce\x87\xc3\x6d\x3e\xb7\x76\x64\x6a\xfd\xe7\xd6\x8f\x21\x3e\xf8\xf1\xfe\x87\x61\xff\xc1\xdf\x4d\xff\x0c\x00\x00\xff\xff\x74\x79\x58\xd4\x90\x3d\x00\x00")

func uiMainGladeBytes() ([]byte, error) {
	return bindataRead(
		_uiMainGlade,
		"ui/main.glade",
	)
}

func uiMainGlade() (*asset, error) {
	bytes, err := uiMainGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/main.glade", size: 15760, mode: os.FileMode(420), modTime: time.Unix(1515538190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui/main.glade": uiMainGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ui": &bintree{nil, map[string]*bintree{
		"main.glade": &bintree{uiMainGlade, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

